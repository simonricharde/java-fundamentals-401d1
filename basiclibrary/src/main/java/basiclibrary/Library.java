/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.lang.reflect.Array;
import java.util.Random;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public int [] roll(int n) {
        int [] resultArray = new int[n];
        for(int i=0; i<n; i++) {
            resultArray[i] = (int) (Math.random() * 6 + 1);
            System.out.println("Rolled Values: "+ resultArray[i]);
        }
        return resultArray;
    }

    public boolean containsDuplicates(int [] numberArray) {
        boolean duplicateFlag = false;
        for (int i = 0; i < numberArray.length; i++) {
            for (int j = i + 1; j < numberArray.length; j++) {
                if (numberArray[i] == numberArray[j]) {
                    duplicateFlag = true;
                    break;
                }
                break;
            }

        }
        String duplicateResult = (duplicateFlag == true) ? "duplicate values" : "No duplicate values";
        System.out.println("This Array has " + duplicateResult);
        return duplicateFlag;
    }

    public float calculateAverage(int [] numberArray) {

        float average = 0.0f;
        for(int number: numberArray) {
            average = average + number;
        }
        average = average / numberArray.length;

        System.out.println("The Average of the given Array is : " + average);
        return average;
    }

    public int[] getLowestAverageArray(int[][] weeklyMonthTemperatures) {
        int [] smallestAveragedArray = {};
        float average = 0.0f;
        for(int [] weeklyTemperatures : weeklyMonthTemperatures) {
            float tempAverage = calculateAverage(weeklyTemperatures);
            if(tempAverage < average) {
                average = tempAverage;
                smallestAveragedArray = weeklyTemperatures;
            } else {
                average = tempAverage;
            }
        }
        for(int item: smallestAveragedArray) {
            System.out.println(item);
        }
        return smallestAveragedArray;
    }

}
